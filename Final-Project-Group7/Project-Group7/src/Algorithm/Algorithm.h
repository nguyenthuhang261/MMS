#pragma once
#include <memory>
#include "../Maze/Maze.h"
#include "../API/API.h"
#include "../LandBasedWheeled/LandBasedWheeled.h"
namespace fp
{
/**
 * @brief
    Class for the BFS Algorithm
 * */
class Algorithm
{
	public:
	bool goal_flag; //If BFS search ends at the goal point, this is set to true
	struct Node{	// Node structure containing the parent nodes, child nodes, direction of the parent nodes and child nodes
	int px,py;
    int cx,cy;
    char prev_dir,next_dir;
};
	std::vector<Node> queue;     // Vector for storing the nodes generated by BFS
	std::vector<Node> valid; // Vector to store all the Valid nodes 
	std::vector<int> X;			 // Vector for storing the x coordinates of the path generated
 	std::vector<int> Y;			 // Vector for storing the y coodinates of the path generated
	
	std::vector<char> direc;     // Vector for storing the directions of the child node
	
	//Method Prototypes
	bool CheckNode(int, int,char);
	void GenerateSequence(fp::Maze&, std::shared_ptr<fp::LandBasedRobot>);
	void MoveRobot(fp::Maze&, std::shared_ptr<fp::LandBasedRobot>);
	void ValidNodes(fp::Maze&,int,int, char);
	void SolveMaze(fp::Maze&, std::shared_ptr<fp::LandBasedRobot>);

};

}
